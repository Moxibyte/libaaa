/*
 *   https://libaaa.cc main HEADER file.
 *   libaaa is a simple radius protocol library written in pure c
 *
 *   Please visit https://libaaa.cc for more information and support!
 *
 *   (C) Copyright 2023 Moxibyte GmbH https://moxibyte.com <webadmin@moxibyte.com>
 *
 *   Published under the "Boost Software License 1.0"
 *   Boost Software License - Version 1.0 - August 17th, 2003
 *
 *   Permission is hereby granted, free of charge, to any person or organization
 *   obtaining a copy of the software and accompanying documentation covered by
 *   this license (the "Software") to use, reproduce, display, distribute,
 *   execute, and transmit the Software, and to prepare derivative works of the
 *   Software, and to permit third-parties to whom the Software is furnished to
 *   do so, all subject to the following:
 *
 *   The copyright notices in the Software and this entire statement, including
 *   the above license grant, this restriction and the following disclaimer,
 *   must be included in all copies of the Software, in whole or in part, and
 *   all derivative works of the Software, unless such copies or derivative
 *   works are solely in the form of machine-executable object code generated by
 *   a source language processor.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *   SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *   FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *   DEALINGS IN THE SOFTWARE.
 *
*/
#ifndef LIBAAA_H
#define LIBAAA_H

#include <time.h>
#include <stdint.h>
#include <string.h>

//
// === libaaa global constants ===
//
#define LIBAAA_OK 0
#define LIBAAA_ERROR -1

#define LIBAAA_PACKET_MAX_SIZE 4096
#define LIBAAA_PG_CONTEXT_SIZE 64

// TODO: Change to proper detection
#define LIBAAA_LITTLE_ENDIAN
#define LIBAAA_API

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

//
// === Public exposed types ===
// 
typedef void* libaaa_pg_context_t;
typedef uint8_t libaaa_ipv4addr_t[4];
typedef uint8_t libaaa_ipv6addr_t[16];
typedef uint8_t libaaa_ifid_t[8];
typedef uint32_t libaaa_vendor_id_t;

typedef uint8_t libaaa_radius_code_t;
#define LIBAAA_RADIUS_CODE_ACCESS_REQUEST       ((uint8_t)1)
#define LIBAAA_RADIUS_CODE_ACCESS_ACCEPT        ((uint8_t)2)
#define LIBAAA_RADIUS_CODE_ACCESS_REJECT        ((uint8_t)3)
#define LIBAAA_RADIUS_CODE_ACCOUNTING_REQUEST   ((uint8_t)4)
#define LIBAAA_RADIUS_CODE_ACCOUNTING_RESPONSE  ((uint8_t)5)
#define LIBAAA_RADIUS_CODE_ACCESS_CHALLENGE     ((uint8_t)11)
#define LIBAAA_RADIUS_CODE_STATUS_SERVER        ((uint8_t)12)
#define LIBAAA_RADIUS_CODE_STATUS_CLIENT        ((uint8_t)13)

typedef uint8_t libaaa_radius_attribute_type_t;
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_USER_NAME                  ((uint8_t)1) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_USER_PASSWORD              ((uint8_t)2) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CHAP_PASSWORD              ((uint8_t)3) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_NAS_IP_ADDRESS             ((uint8_t)4) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_NAS_PORT                   ((uint8_t)5) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_SERVICE_TYPE               ((uint8_t)6) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_PROTOCOL            ((uint8_t)7) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_IP_ADDRESS          ((uint8_t)8) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_IP_NETMASK          ((uint8_t)9) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_ROUTING             ((uint8_t)10) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FILTER_ID                  ((uint8_t)11) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_MTU                 ((uint8_t)12) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_COMPRESSION         ((uint8_t)13) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_IP_HOST              ((uint8_t)14) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_SERVICE              ((uint8_t)15) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_TCP_PORT             ((uint8_t)16) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_REPLY_MESSAGE              ((uint8_t)18) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CALLBACK_NUMBER            ((uint8_t)19) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CALLBACK_ID                ((uint8_t)20) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_ROUTE               ((uint8_t)22) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_IPX_NETWORK         ((uint8_t)23) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_STATE                      ((uint8_t)24) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CLASS                      ((uint8_t)25) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_VENDOR_SPECIFIC            ((uint8_t)26) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_SESSION_TIMEOUT            ((uint8_t)27) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_IDLE_TIMEOUT               ((uint8_t)28) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_TERMINATION_ACTION         ((uint8_t)29) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CALLED_STATION_ID          ((uint8_t)30) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CALLING_STATION_ID         ((uint8_t)31) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_NAS_IDENTIFIER             ((uint8_t)32) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_PROXY_STATE                ((uint8_t)33) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_LAT_SERVICE          ((uint8_t)34) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_LAT_NODE             ((uint8_t)35) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_LAT_GROUP            ((uint8_t)36) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_APPLETALK_LINK      ((uint8_t)37) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_APPLETALK_NETWORK   ((uint8_t)38) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_FRAMED_APPLETALK_ZONE      ((uint8_t)39) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_CHAP_CHALLENGE             ((uint8_t)60) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_NAS_PORT_TYPE              ((uint8_t)61) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_PORT_LIMIT                 ((uint8_t)62) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LOGIN_LAT_PORT             ((uint8_t)63) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_TYPE_1            ((uint8_t)241) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_TYPE_2            ((uint8_t)242) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_TYPE_3            ((uint8_t)243) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_TYPE_4            ((uint8_t)244) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LONG_EXTENDED_TYPE_1       ((uint8_t)245) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_LONG_EXTENDED_TYPE_2       ((uint8_t)246) 

#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_1 ((uint8_t)241) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_2 ((uint8_t)242) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_3 ((uint8_t)243) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_4 ((uint8_t)244) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_5 ((uint8_t)245) 
#define LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_6 ((uint8_t)246) 

// 
// === API "pg" (Packet Generation) ===
//

/*!
 * @brief Initializes a pg_context for packet creation.
 * 
 * The next function call before any packet function should be libaaa_pg_reset.
 * @param context Preallocated empty or previously used pg_context.
 * @param output_buffer The output packet buffer.
 * @param output_buffer_size Maximum size of the output buffer (20 <= output_buffer_size <= 4096).
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_init(libaaa_pg_context_t context, void* output_buffer, int output_buffer_size);

/*!
 * @brief Resets the context on the exiting buffer for the next packet.
 * @param context context to reset.
 * @param code RADIUS code.
 * @param identifier Request/Reply identification.
*/
LIBAAA_API void libaaa_pg_reset(libaaa_pg_context_t context, libaaa_radius_code_t code, uint8_t identifier);

/*!
 * @brief Finishes all pending operation on a packet so that it's ready for sending.
 * 
 * The context can be reused by calling libaaa_pg_init or libaaa_pg_reset.
 * 
 * NEVER SEND A PACKET WITHOUT CALLING THIS FUNCTION!!!
 * @param context context to finalize.
 * @return length of final packet (or -1 on failure).
*/
LIBAAA_API int libaaa_pg_finalize(libaaa_pg_context_t context);

/*!
 * @brief Sets the authenticator.
 * @param context Preallocated and initialized context.
 * @param authenticator Pointer to 16-Byte authenticator.
*/
LIBAAA_API void libaaa_pg_set_authenticator(libaaa_pg_context_t context, const void* authenticator);

/*!
 * @brief Begins a new "normal" (RFC 2865) attribute.
 * 
 * This should be the first call for attribute creation. The following calls should be to one of the 
 * "libaaa_pg_write_***" functions. The write function will place the content and length. No validation
 * between type, data and length is done while writing.
 * @param context Context to write to.
 * @param type Type to use.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_attribute_begin(libaaa_pg_context_t context, libaaa_radius_attribute_type_t type);

/*!
 * @brief Begins a new extended (RFC 6929) attribute
 * 
 * This should be the first call for attribute creation. The following calls should be to one of the
 * "libaaa_pg_write_***" functions. The write function will place the content and length. No validation
 * between type, data and length is done while writing.
 * @param context Context to write to.
 * @param type Type to use.
 * @param extended_type Extended type.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_attribute_begin_extended(libaaa_pg_context_t context, libaaa_radius_attribute_type_t type, libaaa_radius_attribute_type_t extended_type);

/*!
 * @brief Begins a new extended (RFC 6929) attribute
 *
 * This should be the first call for attribute creation. The following calls should be to one of the
 * "libaaa_pg_write_***" functions. The write function will place the content and length. No validation
 * between type, data and length is done while writing.
 * @param context Context to write to.
 * @param type Type to use.
 * @param extended_type Extended type.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_attribute_begin_long_extended(libaaa_pg_context_t context, libaaa_radius_attribute_type_t type, libaaa_radius_attribute_type_t extended_type);

/*!
 * @brief Begins a new vendor specific (RFC 6929) attribute
 *
 * This should be the first call for attribute creation. The following calls should be to one of the
 * "libaaa_pg_write_***" functions. The write function will place the content and length. No validation
 * between type, data and length is done while writing.
 * @param context Context to write to.
 * @param vendor_id Vendor PEN (Private Enterprise Code).
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_attribute_begin_vendor_specific(libaaa_pg_context_t context, libaaa_vendor_id_t vendor_id);

/*!
 * @brief Begins a new extended vendor specific (RFC 6929) attribute
 *
 * This should be the first call for attribute creation. The following calls should be to one of the
 * "libaaa_pg_write_***" functions. The write function will place the content and length. No validation
 * between type, data and length is done while writing.
 * @param context Context to write to.
 * @param type Vendor type code LIBAAA_RADIUS_ATTRIBUTE_TYPE_EXTENDED_VENDOR_SPECIFIC_(1-6).
 * @param vendor_id Vendor PEN (Private Enterprise Code).
 * @param vendor_type Vendor specific type of attribute.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_attribute_begin_extended_vendor_specific(libaaa_pg_context_t context, libaaa_radius_attribute_type_t type, libaaa_vendor_id_t vendor_id, libaaa_radius_attribute_type_t vendor_type);

/*!
 * @brief Writes an integer (uint32_t) to the just started attribute.
 * @param context Context to write to.
 * @param value Integer value.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_integer(libaaa_pg_context_t context, uint32_t value);

/*!
 * @brief Writes an enum (uint32_t) to the just started attribute.
 * @param context Context to write to.
 * @param value Enum value.
 * @return status code (-1 on failure).
*/
#define libaaa_pg_write_enum(context, value) libaaa_pg_write_integer(context, value)

/*!
 * @brief Writes a timestamp.
 * @param context Context to write to.
 * @param value Time value.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_time(libaaa_pg_context_t context, time_t value);

/*!
 * @brief Writes a text.
 * @param context Context to write to.
 * @param value Text value
 * @param len Length of the text (without null terminator)
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_text(libaaa_pg_context_t context, const char* value, int len);

/*!
 * @brief Write a string (binary data).
 * 
 * This function will write automatically send concat packet in case len > possible size.
 * @param context Context to write to.
 * @param value Buffer to read from.
 * @param len Length of the buffer to read.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_string(libaaa_pg_context_t context, const void* value, int len);

/*!
 * @brief Write an ipv4 interface id.
 * @param context Context to write to.
 * @param ifid IPv6 interface id.
 * @return status code (-1 on failure)
*/
LIBAAA_API int libaaa_pg_write_ifid(libaaa_pg_context_t context, libaaa_ifid_t ifid);

/*!
 * @brief Writes an IPv4 address.
 * @param context Context to write to.
 * @param ipv4 IPv4 Address.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_ipv4addr(libaaa_pg_context_t context, libaaa_ipv4addr_t ipv4);

/*!
 * @brief Writes an IPv6 address.
 * @param context Context to write to.
 * @param ipv6 IPv6 Address.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_ipv6addr(libaaa_pg_context_t context, libaaa_ipv6addr_t ipv6);

/*!
 * @brief Write an IPv6 prefix.
 * @param context Context to write to.
 * @param prefix_len Length of the ip prefix in bits (0 - 128).
 * @param ipv6 IPv6 Prefix.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_ipv6prefix(libaaa_pg_context_t context, uint8_t prefix_len, libaaa_ipv6addr_t prefix);

/*!
 * @brief Write an IPv4 prefix.
 * @param context Context to write to.
 * @param prefix_len Length of the ip prefix in bits (0 - 32).
 * @param prefix IPv4 Prefix.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_ipv4prefix(libaaa_pg_context_t context, uint8_t prefix_len, libaaa_ipv4addr_t prefix);

/*!
 * @brief Writes an integer (uint64_t) to the just started attribute.
 * @param context Context to write to.
 * @param value Integer value.
 * @return status code (-1 on failure).
*/
LIBAAA_API int libaaa_pg_write_integer64(libaaa_pg_context_t context, uint64_t value);

//
// === API "pr" (Packet Reader) ===
//

#ifdef __cplusplus
}
#endif // __cplusplus
#endif // LIBAAA_H
